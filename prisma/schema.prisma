// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model profile_tbl {
  id       String @id @default(uuid())
  userID   String @unique
  name     String
  email    String
  imageUrl String @db.Text

  servers server_tbl[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members  member_tbl[]
  channels channel_tbl[]

  @@schema("public")
}

model server_tbl {
  id         String      @id @default(uuid())
  name       String
  imageUrl   String      @db.Text
  inviteCode String      @unique
  profileID  String
  profile    profile_tbl @relation(fields: [profileID], references: [id], onDelete: Cascade)

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  members   member_tbl[]
  channels  channel_tbl[]

  @@index([profileID])
  @@schema("public")
}

enum MEMBER_ROLE {
  ADMIN
  MODERATOR
  GUEST

  @@schema("public")
}

model member_tbl {
  id        String      @id @default(uuid())
  role      MEMBER_ROLE @default(GUEST)
  profileID String
  profile   profile_tbl @relation(fields: [profileID], references: [id], onDelete: Cascade)

  serverID String
  server   server_tbl @relation(fields: [serverID], references: [id], onDelete: Cascade)

  conversationInitiated conversation_tbl[] @relation("memberOne")
  conversationReceived  conversation_tbl[] @relation("memberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages           message_tbl[]
  direct_message_tbl direct_message_tbl[]

  @@index([profileID])
  @@index([serverID])
  @@schema("public")
}

enum CHANNEL_TYPE {
  TEXT
  AUDIO
  VIDEO

  @@schema("public")
}

model channel_tbl {
  id   String       @id @default(uuid())
  name String
  type CHANNEL_TYPE @default(TEXT)

  profileID String
  profile   profile_tbl @relation(fields: [profileID], references: [id], onDelete: Cascade)

  serverID String
  server   server_tbl @relation(fields: [serverID], references: [id], onDelete: Cascade)

  messages message_tbl[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileID])
  @@index([serverID])
  @@schema("public")
}

model message_tbl {
  id      String @id @default(uuid())
  content String @db.Text

  fileURL String? @db.Text

  memberID String
  member   member_tbl @relation(fields: [memberID], references: [id], onDelete: Cascade)

  channelID String
  channel   channel_tbl @relation(fields: [channelID], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)

  @@index([channelID])
  @@index([memberID])
  @@schema("public")
}

model conversation_tbl {
  id String @id @default(uuid())

  memberOneID String
  memberOne   member_tbl @relation("memberOne", fields: [memberOneID], references: [id], onDelete: Cascade)

  memberTwoID    String
  memberTwo      member_tbl           @relation("memberTwo", fields: [memberTwoID], references: [id], onDelete: Cascade)
  direct_message direct_message_tbl[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([memberOneID, memberTwoID])
  @@schema("public")
}

model direct_message_tbl {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileURL String? @db.Text

  memberID String
  member   member_tbl @relation(fields: [memberID], references: [id], onDelete: Cascade)

  conversationID String
  conversation   conversation_tbl @relation(fields: [conversationID], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberID])
  @@index([conversationID])
  @@schema("public")
}
